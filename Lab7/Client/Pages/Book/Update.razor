@page "/books/update/{Id:guid}"

<PageTitle>Update Book</PageTitle>

<EditForm Model="_book" OnValidSubmit="() => UpdateAsync()">
    <div class="form-group mb-3">
        <label for="bookName">Name</label>
        <InputText @bind-Value="_book.Name" class="form-control" id="bookName"></InputText>
    </div>
    <div class="form-group mb-3">
        <label for="bookAuthor">Auhor</label>
        <InputText @bind-Value="_book.Author" class="form-control" id="bookAuthor"></InputText>
    </div>
    <div class="form-group mb-3">
        <label for="bookPrice">Price</label>
        <InputNumber @bind-Value="_book.Price" class="form-control" id="bookPrice"></InputNumber>
    </div>

    <DataAnnotationsValidator />
    <ValidationSummary />

    <button class="btn btn-success" type="submit">Update</button>
    <button @onclick="@(() => _navigationManager.NavigateTo("/books", true))" class="btn btn-secondary">Cancel</button>

</EditForm>

@using Services;
@inject IDataService<Models.Book> _service;
@inject NavigationManager _navigationManager;
@code {
    [Parameter] public Guid Id { get; set; }

    private Models.Book _book = new()
        {
            Name = "",
            Author = "",
            Price = 0
        };

    protected override async Task OnParametersSetAsync()
    {
        _book = await _service.GetAsync(Id);
    }

    private async Task UpdateAsync()
    {
        try
        {
            await _service.UpdateAsync(Id, _book);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            _navigationManager.NavigateTo("/books");
        }
    }
}
