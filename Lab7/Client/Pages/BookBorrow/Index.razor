@page "/book_borrows"

<PageTitle>Book Borrows</PageTitle>

<h1>Index</h1>

<p>
    <a href="book_borrows/create" class="btn btn-success">Create New</a>
</p>

@if (_bookBorrows == default)
{
    <h1>Loading...</h1>
    return;
}

<table class="table">
    <thead>
        <tr>
            <th>Reader</th>
            <th>Book</th>
            <th>Borrow Date</th>
            <th>Return Date</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
            @foreach (var bookBorrow in _bookBorrows)
            {
                <tr>
                    <td>
                        @bookBorrow.Reader.Description
                    </td>
                    <td>
                        @bookBorrow.Book.Description
                    </td>
                    <td>
                        @bookBorrow.BorrowDate
                    </td>
                    <td>
                        @bookBorrow.ReturnDate
                    </td>
                    <td>
                    <a href="book_borrows/update/@bookBorrow.Id" class="btn btn-warning m-10">Edit</a> |
                        <button @onclick="() => DeleteAsync(bookBorrow)" class="btn btn-danger m-10">Delete</button>
                    </td>
                </tr>
            }
    </tbody>
</table>

@using Services;
@inject IDataService<Models.BookBorrow> _service;
@code {
    private IEnumerable<Models.BookBorrow> _bookBorrows = default!;

    protected override async Task OnInitializedAsync()
    {
        _bookBorrows = await _service.GetAllAsync();
    }

    private async Task DeleteAsync(Models.BookBorrow reader)
    {
        await _service.DeleteAsync(reader.Id);
        _bookBorrows = _bookBorrows.Where(b => b.Id != reader.Id);
    }
}
